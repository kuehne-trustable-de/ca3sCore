enum Interval {
    MINUTE, HOUR, DAY, WEEK, MONTH
}

@skipClient
entity AuditTrace{

	actorName String required
	actorRole String required
	plainContent String required
	contentTemplate String required
	createdOn Instant required
}


entity CAConnectorConfig{

	name String required
	caConnectorType CAConnectorType required
	caUrl String
	pollingOffset Integer
	defaultCA Boolean
	active Boolean
	selector String
	interval Interval
	plainSecret String
}

enum CAConnectorType {
    INTERNAL, CMP, ADCS, ADCS_CERTIFICATE_INVENTORY, DIRECTORY
}

entity RequestProxyConfig{

	name String required
	requestProxyUrl String required
	active Boolean
}

@skipClient
entity CertificateComment{
  comment TextBlob required
}

entity CertificateAttribute {
//	attributeId Long required
    name String required
    value String
}

entity Certificate {

  tbsDigest String required
  subject String required
  sans String
  issuer String required
  root String
  type String required
  description String
  fingerprint String
  serial String required
  validFrom Instant required
  validTo Instant required
  keyAlgorithm String
  keyLength Integer
  curveName String
  hashingAlgorithm String
  paddingAlgorithm String
  signingAlgorithm String
  creationExecutionId String
  contentAddedAt Instant
  revokedSince Instant
  revocationReason String
  revoked Boolean
  revocationExecutionId String
  administrationComment TextBlob
  endEntity Boolean
  selfsigned Boolean
  trusted Boolean
  active Boolean
  content TextBlob required
}

enum CsrStatus {
    PROCESSING, ISSUED, REJECTED, PENDING
}

@skipClient
entity CSRComment{
  comment TextBlob required
}

entity CSR{

   	csrBase64 TextBlob required
  	subject String required
  	sans String
  	requestedOn Instant required
  	requestedBy String required
  	pipelineType PipelineType required
  	status CsrStatus required
  	administeredBy String
  	approvedOn Instant
  	rejectedOn Instant
  	rejectionReason String
  	processInstanceId String
	signingAlgorithm String
	isCSRValid Boolean
	x509KeySpec String
	publicKeyAlgorithm String
	keyAlgorithm String
  	keyLength Integer
	publicKeyHash String
  	serversideKeyGeneration Boolean
	subjectPublicKeyInfoBase64 TextBlob required
	requestorComment TextBlob
	administrationComment TextBlob
}

entity CsrAttribute{

  	name String required
  	value String
}

enum ProtectedContentType {
    KEY, SECRET, PASSWORD
}

enum ContentRelationType {
    CERTIFICATE, CONNECTION, CSR
}

@skipClient
entity ProtectedContent{

   	contentBase64 TextBlob required
  	type ProtectedContentType required
  	relationType ContentRelationType
  	relatedId Long
}

enum TimedElementNotificationType {
    ON_EXPIRY, ON_EXPIRY_ACTIVE
}

@skipClient
entity TimedElementNotification{

  	type TimedElementNotificationType required
  	notifyOn Instant required
  	customMessage String
}

enum AlgorithmType {
    SIGNING, PADDING, HASH, CURVE
}

@skipClient
entity AlgorithmRestriction{

  	type AlgorithmType required
  	notAfter Instant
  	identifier String
  	name String
    acceptable Boolean required
}

entity AlgorithmRestrictions{
}


@skipClient
entity RDN{

//	@GeneratedValue
//  	id Long required

}

@skipClient
entity RDNAttribute{

  	attributeType String required
  	attributeValue String required
}

@skipClient
entity RequestAttribute{

  	attributeType String required

}

@skipClient
entity RequestAttributeValue{

  	attributeValue String required

}

@skipClient
entity ImportedURL{

  	name String required
  	importDate Instant required
}

enum PipelineType {
    ACME, SCEP, WEB, INTERNAL
}

entity Pipeline{

  	name String required
  	type PipelineType required
  	urlPart String
  	description String
  	approvalRequired Boolean
}

entity PipelineAttribute{

  	name String required
  	value String required
}

enum BPMNProcessType {
    CA_INVOCATION, REQUEST_AUTHORIZATION
}

entity BPMNProcessInfo{

  	name String required
  	version String required
  	type BPMNProcessType required
  	author String required
  	lastChange Instant required
  	signatureBase64 TextBlob required
  	bpmnHashBase64 String required
  	processId String required
}



//  status (required, string):  The status of this account.  Possible
//  values are: "valid", "deactivated", and "revoked".  The value
//  "deactivated" should be used to indicate client-initiated
//  deactivation whereas "revoked" should be used to indicate server-
//  initiated deactivation.  (See Section 7.1.6)
enum AccountStatus {
    VALID, DEACTIVATED, REVOKED
}


entity AcmeAccount {

//	@Id
//	@GenericGenerator(name="RandomGenerator.generatorName", strategy="de.trustable.ca3s.acme.server.entity.RandomGenerator")
//	@GeneratedValue(generator="RandomGenerator.generatorName")
  	accountId Long required
  	realm String required
	status AccountStatus

//  termsOfServiceAgreed (optional, boolean):  Including this field in a
//  new-account request, with a value of true, indicates the client's
//  agreement with the terms of service.  This field is not updateable
//  by the client.
	termsOfServiceAgreed Boolean required
	publicKeyHash String required
  	publicKey TextBlob required
}


entity AcmeContact {

// @GenericGenerator(name="RandomGenerator.generatorName", strategy="de.trustable.ca3s.acme.server.entity.RandomGenerator")
// @GeneratedValue(generator="RandomGenerator.generatorName")
	contactId Long required

    contactUrl String required
}

// The status of this order. Possible values are:
// "pending", "ready", "processing", "valid", and "invalid". (See Section 7.1.6)
enum AcmeOrderStatus {
    PENDING, READY, PROCESSING, VALID, INVALID
}

entity AcmeOrder{

//	@GenericGenerator(name = "RandomGenerator.generatorName", strategy = "de.trustable.ca3s.acme.server.entity.RandomGenerator")
//	@GeneratedValue(generator = "RandomGenerator.generatorName")
	orderId Long required

	status AcmeOrderStatus required

// expires (optional, string): The timestamp after which the server will
// consider this order invalid, encoded in the format specified in RFC 3339
// [RFC3339]. This field is REQUIRED for objects with "pending" or "valid" in
// the status field.
	expires Instant

// notBefore (optional, string): The requested value of the notBefore field in
// the certificate, in the date format defined in [RFC3339].
	notBefore Instant

// notAfter (optional, string): The requested value of the notAfter field in the
// certificate, in the date format defined in [RFC3339].
	notAfter Instant

// error (optional, object): The error that occurred while processing the order,
// if any. This field is structured as a problem document [RFC7807].
//
// mapped as a simple String for now ...
	error String


// finalize (required, string): A URL that a CSR must be POSTed to once all of
// the order's AcmeAuthorizations are satisfied to finalize the order. The result of
// a successful finalization will be the population of the certificate URL for
// the order.
	finalizeUrl String

// certificate (optional, string): A URL for the certificate that has been
// issued in response to this order.
	certificateUrl String

}

entity AcmeIdentifier {

	acmeIdentifierId Long required

// type (required, string): The type of AcmeIdentifier. This document defines the
// "dns" AcmeIdentifier type. See the registry defined in Section 9.7.7 for any
// others.
	type String required
	value String required

}

@skipClient
entity AcmeAuthorization {

//	@GenericGenerator(name="RandomGenerator.generatorName", strategy="de.trustable.ca3s.acme.server.entity.RandomGenerator")
//	@GeneratedValue(generator="RandomGenerator.generatorName")
	AcmeAuthorizationId Long required

	type String required

	value String required

}

enum ChallengeStatus {

	PENDING, VALID, INVALID, DEACTIVATED, EXPIRED, REVOKED
}

@skipClient
entity AcmeChallenge {

	challengeId Long required
	type String required
	value String required
	token String required
	validated Instant
	status ChallengeStatus required

}

entity AcmeNonce {
	nonceValue String
	expiresAt Instant
}


entity UserPreference{

	userId Long required
  	name String required
	content TextBlob required
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {

	Certificate{certificateAttributes} to CertificateAttribute{certificate}

	CSR{rdns} to RDN{csr}
	CSR{ras} to RequestAttribute{csr}
	CSR{csrAttributes} to CsrAttribute{csr}

	RDN{rdnAttributes} to RDNAttribute{rdn}

	RequestAttribute{requestAttributeValues} to RequestAttributeValue{reqAttr}

	Pipeline{pipelineAttributes} to PipelineAttribute{pipeline}

//  contact (optional, array of string):  An array of URLs that the
//  server can use to contact the client for issues related to this
//  account.  For example, the server may wish to notify the client
//  about server-initiated revocation or certificate expiration.  For
//  information on supported URL schemes, see Section 7.3
	AcmeAccount{contacts} to AcmeContact{account}


//  orders (required, string):  A URL from which a list of orders
//  submitted by this account can be fetched via a POST-as-GET
//  request, as described in Section 7.1.2.1.
	AcmeAccount{orders} to AcmeOrder{account}

// AcmeAuthorizations (required, array of string): For pending orders, the
// AcmeAuthorizations that the client needs to complete before the requested
// certificate can be issued (see Section 7.5), including unexpired
// AcmeAuthorizations that the client has completed in the past for AcmeIdentifiers
// specified in the order. The AcmeAuthorizations required are dictated by server
// policy and there may not be a 1:1 relationship between the order AcmeIdentifiers
// and the AcmeAuthorizations required. For final orders (in the "valid" or
// "invalid" state), the AcmeAuthorizations that were completed. Each entry is a URL
// from which an AcmeAuthorization can be fetched with a POST-as-GET request.
	AcmeOrder{AcmeAuthorizations} to AcmeAuthorization{order}

	AcmeOrder{AcmeIdentifiers} to AcmeIdentifier{order}

	AcmeAuthorization{challenges} to AcmeChallenge{AcmeAuthorization}

    AlgorithmRestrictions{restrictions} to AlgorithmRestriction
}

relationship ManyToOne {

	AuditTrace{csr} to CSR
	AuditTrace{certificate} to Certificate
	AuditTrace{pipeline} to Pipeline
	AuditTrace{caConnector} to CAConnectorConfig
	AuditTrace{caConnector} to CAConnectorConfig
	AuditTrace{processInfo} to BPMNProcessInfo

    TimedElementNotification{certificate} to Certificate

	AcmeOrder{csr} to CSR
	AcmeOrder{certificate} to Certificate

    RequestAttribute{holdingRequestAttribute} to RequestAttributeValue

  	Certificate{issuingCertificate} to Certificate
  	Certificate{rootCertificate} to Certificate
	Certificate{revocationCA} to CAConnectorConfig

	CSR{pipeline} to Pipeline

	Pipeline{caConnector} to CAConnectorConfig
	Pipeline{processInfo} to BPMNProcessInfo
	Pipeline{algorithms} to AlgorithmRestrictions

}

relationship OneToOne{

  Certificate{csr} to CSR{certificate}
  Certificate{comment} to CertificateComment{certificate}

  CSR{comment} to CSRComment{csr}

  RequestProxyConfig{secret} to ProtectedContent

  CAConnectorConfig{secret} to ProtectedContent

}

// Set pagination options
paginate Certificate with infinite-scroll
// paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except CertificateAttribute

// Set an angular suffix
// angularSuffix * with mySuffix
