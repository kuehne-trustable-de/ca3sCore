/*
 * EJBCA REST Interface
 * API reference documentation.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.trustable.ca3s.core.service.dto.ejbca;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;
/**
 * Use one of allowed values as property(see enum values below). QUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username or SerialNr;  Available STATUS - multiplicity [0, 12] - values are: CERT_ACTIVE, CERT_REVOKED, REVOCATION_REASON_UNSPECIFIED, REVOCATION_REASON_KEYCOMPROMISE, REVOCATION_REASON_CACOMPROMISE, REVOCATION_REASON_AFFILIATIONCHANGED, REVOCATION_REASON_SUPERSEDED, REVOCATION_REASON_CESSATIONOFOPERATION, REVOCATION_REASON_CERTIFICATEHOLD, REVOCATION_REASON_REMOVEFROMCRL, REVOCATION_REASON_PRIVILEGESWITHDRAWN, REVOCATION_REASON_AACOMPROMISE;  END_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA;  ISSUED_DATE &#x27;BEFORE&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  ISSUED_DATE &#x27;AFTER&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE &#x27;BEFORE&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE &#x27;AFTER&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE &#x27;BEFORE&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE &#x27;AFTER&#x27; - multiplicity [0, 1] - ISO 8601 Date string.  UPDATE_TIME &#x27;BEFORE&#x27; - multiplicity [0, 1] - ISO 8601 Date string;  UPDATE_TIME &#x27;AFTER&#x27; - multiplicity [0, 1] - ISO 8601 Date string;
 */
@Schema(description = "Use one of allowed values as property(see enum values below). QUERY - multiplicity [0, 1] - is used to search by SubjectDn, SubjectAn, Username or SerialNr;  Available STATUS - multiplicity [0, 12] - values are: CERT_ACTIVE, CERT_REVOKED, REVOCATION_REASON_UNSPECIFIED, REVOCATION_REASON_KEYCOMPROMISE, REVOCATION_REASON_CACOMPROMISE, REVOCATION_REASON_AFFILIATIONCHANGED, REVOCATION_REASON_SUPERSEDED, REVOCATION_REASON_CESSATIONOFOPERATION, REVOCATION_REASON_CERTIFICATEHOLD, REVOCATION_REASON_REMOVEFROMCRL, REVOCATION_REASON_PRIVILEGESWITHDRAWN, REVOCATION_REASON_AACOMPROMISE;  END_ENTITY_PROFILE, CERTIFICATE_PROFILE, CA - multiplicity [0, *) - exact match of the name for referencing End Entity Profile, Certificate Profile or CA;  ISSUED_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  ISSUED_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  EXPIRE_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  REVOCATION_DATE 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string.  UPDATE_TIME 'BEFORE' - multiplicity [0, 1] - ISO 8601 Date string;  UPDATE_TIME 'AFTER' - multiplicity [0, 1] - ISO 8601 Date string;  ")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-02-27T11:17:53.164838525Z[GMT]")

public class SearchCertificateCriteriaRestRequest {
  /**
   * A search property
   */
  @JsonAdapter(PropertyEnum.Adapter.class)
  public enum PropertyEnum {
    @JsonProperty("QUERY")
    QUERY("QUERY"),
    @JsonProperty("END_ENTITY_PROFILE")
    END_ENTITY_PROFILE("END_ENTITY_PROFILE"),
    @JsonProperty("CERTIFICATE_PROFILE")
    CERTIFICATE_PROFILE("CERTIFICATE_PROFILE"),
    @JsonProperty("EXTERNAL_ACCOUNT_BINDING_ID")
    EXTERNAL_ACCOUNT_BINDING_ID("EXTERNAL_ACCOUNT_BINDING_ID"),
    @JsonProperty("CA")
    CA("CA"),
    @JsonProperty("STATUS")
    STATUS("STATUS"),
    @JsonProperty("ISSUED_DATE")
    ISSUED_DATE("ISSUED_DATE"),
    @JsonProperty("EXPIRE_DATE")
    EXPIRE_DATE("EXPIRE_DATE"),
    @JsonProperty("REVOCATION_DATE")
    REVOCATION_DATE("REVOCATION_DATE");

    private String value;

    PropertyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PropertyEnum fromValue(String input) {
      for (PropertyEnum b : PropertyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PropertyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PropertyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PropertyEnum.fromValue((String)(value));
      }
    }
  }  @JsonProperty("property")
  private PropertyEnum property = null;

  @JsonProperty("value")
  private String value = null;

  /**
   * An operation for property on inserted value. &#x27;EQUAL&#x27; for string, &#x27;LIKE&#x27; for string value (&#x27;QUERY&#x27;), &#x27;BEFORE&#x27; or &#x27;AFTER&#x27; for date values
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    @JsonProperty("EQUAL")
    EQUAL("EQUAL"),
    @JsonProperty("LIKE")
    LIKE("LIKE"),
    @JsonProperty("BEFORE")
    BEFORE("BEFORE"),
    @JsonProperty("AFTER")
    AFTER("AFTER");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String input) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OperationEnum.fromValue((String)(value));
      }
    }
  }  @JsonProperty("operation")
  private OperationEnum operation = null;

  public SearchCertificateCriteriaRestRequest property(PropertyEnum property) {
    this.property = property;
    return this;
  }

   /**
   * A search property
   * @return property
  **/
  @Schema(example = "CERTIFICATE_PROFILE", description = "A search property")
  public PropertyEnum getProperty() {
    return property;
  }

  public void setProperty(PropertyEnum property) {
    this.property = property;
  }

  public SearchCertificateCriteriaRestRequest value(String value) {
    this.value = value;
    return this;
  }

   /**
   * A search value. This could be sting value, ISO 8601 Date string, an appropriate string name of End Entity Profile or Certificate Profile or CA
   * @return value
  **/
  @Schema(example = "ENDUSER", description = "A search value. This could be sting value, ISO 8601 Date string, an appropriate string name of End Entity Profile or Certificate Profile or CA")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public SearchCertificateCriteriaRestRequest operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * An operation for property on inserted value. &#x27;EQUAL&#x27; for string, &#x27;LIKE&#x27; for string value (&#x27;QUERY&#x27;), &#x27;BEFORE&#x27; or &#x27;AFTER&#x27; for date values
   * @return operation
  **/
  @Schema(example = "EQUAL", description = "An operation for property on inserted value. 'EQUAL' for string, 'LIKE' for string value ('QUERY'), 'BEFORE' or 'AFTER' for date values")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchCertificateCriteriaRestRequest searchCertificateCriteriaRestRequest = (SearchCertificateCriteriaRestRequest) o;
    return Objects.equals(this.property, searchCertificateCriteriaRestRequest.property) &&
        Objects.equals(this.value, searchCertificateCriteriaRestRequest.value) &&
        Objects.equals(this.operation, searchCertificateCriteriaRestRequest.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(property, value, operation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchCertificateCriteriaRestRequest {\n");

    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
